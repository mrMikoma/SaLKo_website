services:
  postgres:
    image: postgres:17.5
    container_name: ${NAME_PREFIX}-postgres-${BRANCH_SUFFIX}
    networks:
      - internal
    env_file: .env.dev
    volumes:
      - /home/salko/postgres-dev/postgres-data:/var/lib/postgresql/data
      - /home/salko/postgres-dev/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  nextjs:
    image: ${IMAGE_TAG_NAME}:${IMAGE_VERSION}
    container_name: ${NAME_PREFIX}-nextjs-${BRANCH_SUFFIX}
    networks:
      - internal
      - outgoing
    env_file: .env.dev
    environment:
      - PORT=${CONTAINER_PORT}
      - HOSTNAME=${HOSTNAME}
      - DATABASE_CONNECTION_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-${BRANCH_SUFFIX}:${POSTGRES_HOST_PORT}/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    # healthcheck:
    #   test: curl --fail http://localhost:3001/ || exit 1
    #   interval: 60s
    #   timeout: 30s
    #   retries: 3
    #   start_period: 30s
    labels:
      - traefik.enable=true
      - traefik.http.routers.nextjs-${BRANCH_SUFFIX}.rule=Host(`${SITE_PREFIX}.${HOST_URL}`)
      - traefik.http.routers.nextjs-${BRANCH_SUFFIX}.entrypoints=websecure
      - traefik.http.routers.nextjs-${BRANCH_SUFFIX}.tls.certresolver=cloudflare
      - traefik.http.routers.nextjs-${BRANCH_SUFFIX}.middlewares=noindex-${BRANCH_SUFFIX}
      - traefik.http.middlewares.noindex-${BRANCH_SUFFIX}.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,noarchive,nosnippet # SEO prevention middleware for non-production
      - traefik.http.services.nextjs-${BRANCH_SUFFIX}.loadbalancer.server.port=${CONTAINER_PORT}
      # - traefik.http.services.nextjs-${BRANCH_SUFFIX}.loadbalancer.healthcheck
      # - traefik.http.services.nextjs-${BRANCH_SUFFIX}.rateLimit.burst=100
      # - traefik.http.services.nextjs-${BRANCH_SUFFIX}.rateLimit.average=50

#   whoami:
#     image: traefik/whoami
#     container_name: whoami
#     networks:
#       - outgoing
#     env_file: .env.dev
#     labels:
#       - traefik.enable=true
#       - traefik.http.routers.whoami.rule=Host(`${SITE_PREFIX}.${HOST_URL}`) && PathPrefix(`/${SITE_PREFIX}`)
#       - traefik.http.routers.whoami.entrypoints=websecure
#       - traefik.http.routers.whoami.tls.certresolver=cloudflare
#       - traefik.http.routers.whoami.middlewares=strip-prefix
#       - traefik.http.middlewares.strip-prefix.stripPrefix.prefixes='/${SITE_PREFIX}'

networks:
  internal:
    driver: bridge
  outgoing:
    external: true
    name: global_outgoing
