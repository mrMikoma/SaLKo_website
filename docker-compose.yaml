services:
  traefik:
    image: "traefik:v3.3.1"
    container_name: ${NAME_PREFIX}-traefik
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=false"
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.network=${NAME_PREFIX}_outgoing"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      # - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      # - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${HTTP_RESOLVER_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - outgoing
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    restart: always

  watchtower:
    image: "ghcr.io/containrrr/watchtower:amd64-1.7.1"
    container_name: ${NAME_PREFIX}-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    command: --interval 30 --cleanup --rolling-restart --label-enable
    restart: always

  postgres-dev:
    image: "postgres:17.2"
    container_name: ${NAME_PREFIX}-postgres-${DEV_SUFFIX}
    ports:
      - ${DEV_POSTGRES_HOST_PORT}:5432
    networks:
      - internal
    environment:
      - POSTGRES_USER=${DEV_POSTGRES_USER}
      - POSTGRES_PASSWORD=${DEV_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DEV_POSTGRES_DB}
    volumes:
      - ./postgres-${DEV_SUFFIX}/postgres-data:/var/lib/postgresql/data
      - ./postgres-${DEV_SUFFIX}/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  nextjs-dev:
    image: "ghcr.io/mrmikoma/salko_website-nextjs-dev:latest"
    container_name: ${NAME_PREFIX}-nextjs-${DEV_SUFFIX}
    networks:
      - internal
      - outgoing
    env_file: .env
    environment:
      - PORT=${DEV_CONTAINER_PORT}
      - HOSTNAME=${DEV_HOSTNAME}
    # depends_on:
    #   postgres-dev:
    #     condition: service_healthy
    restart: always
    # healthcheck:
    #   test: curl --fail http://localhost:3001/ || exit 1
    #   interval: 60s
    #   timeout: 30s
    #   retries: 3
    #   start_period: 30s
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.nextjs-${DEV_SUFFIX}.rule=Host(`${DEV_HOST_URL}`)
      - traefik.http.routers.nextjs-${DEV_SUFFIX}.entrypoints=websecure
      - traefik.http.routers.nextjs-${DEV_SUFFIX}.tls.certresolver=myresolver
      # - traefik.http.routers.nextjs-${DEV_SUFFIX}.middlewares=redirect-to-https
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
      - traefik.http.services.nextjs-${DEV_SUFFIX}.loadbalancer.server.port=${DEV_CONTAINER_PORT}
      # - traefik.http.services.nextjs-${DEV_SUFFIX}.loadbalancer.healthcheck
      # - traefik.http.services.nextjs-${DEV_SUFFIX}.rateLimit.burst=100
      # - traefik.http.services.nextjs-${DEV_SUFFIX}.rateLimit.average=50

  # postgres-prod:
  #   image: "postgres:17.2"
  #   container_name: ${NAME_PREFIX}-postgres-${PROD_SUFFIX}
  #   ports:
  #     - ${PROD_POSTGRES_HOST_PORT}:5432
  #   networks:
  #     - internal
  #   environment:
  #     - POSTGRES_USER=${PROD_POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${PROD_POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${PROD_POSTGRES_DB}
  #   volumes:
  #     - ../postgres-${PROD_SUFFIX}/postgres-data:/var/lib/postgresql/data
  #     - ../postgres-${PROD_SUFFIX}/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "postgres"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  nextjs-prod:
    image: "ghcr.io/mrmikoma/salko_website-nextjs:latest"
    container_name: ${NAME_PREFIX}-nextjs-${PROD_SUFFIX}
    networks:
      - internal
      - outgoing
    env_file:
      - .env
    environment:
      - PORT=${PROD_CONTAINER_PORT}
      - HOSTNAME=${PROD_HOSTNAME}
    restart: always
    # healthcheck:
    #   test: curl --fail http://localhost:3000/ || exit 1
    #   interval: 60s
    #   timeout: 30s
    #   retries: 3
    #   start_period: 30s
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.nextjs-${PROD_SUFFIX}.rule=Host(`${PROD_HOST_URL}`)
      - traefik.http.routers.nextjs-${PROD_SUFFIX}.entrypoints=websecure
      - traefik.http.routers.nextjs-${PROD_SUFFIX}.tls.certresolver=myresolver
      # - traefik.http.routers.nextjs-${PROD_SUFFIX}.middlewares=redirect-to-https
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
      - traefik.http.services.nextjs-${PROD_SUFFIX}.loadbalancer.server.port=${PROD_CONTAINER_PORT}
      # - traefik.http.services.nextjs-${PROD_SUFFIX}.loadbalancer.healthcheck
      # - traefik.http.services.nextjs-${PROD_SUFFIX}.rateLimit.burst=100
      # - traefik.http.services.nextjs-${PROD_SUFFIX}.rateLimit.average=50

networks:
  outgoing:
    driver: bridge
  internal:
    driver: bridge
