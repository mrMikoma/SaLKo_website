name: Build and Publish

on:
  push:
    branches: ["dev"] #["main", "dev"]

env:
  REGISTRY: ghcr.io

jobs:
#  test:
#    runs-on: ubuntu-24.04
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v4.4.0
#        with:
#          node-version: '22'
#
#      - name: Run tests
#        run: |
#          cd nextjs
#          npm ci
#          npm run lint
#          npm test

  build-and-publish:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.ref_name }}
          sparse-checkout: |
            nextjs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          # Fetch all tags
          git fetch --tags --all

          # List all tags that match the version pattern
          latest_tag=$(git tag --list "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
              
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"  # Default to v0.0.0 if no tags exist
          fi
          echo "Latest tag: $latest_tag"
              
          # Extract major, minor, and patch
          IFS='.' read -ra ver <<< "${latest_tag#v}"
          major=${ver[0]}
          minor=${ver[1]}
          patch=${ver[2]}
              
          # Increment patch version
          new_version="v$major.$minor.$((patch + 1))"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create Git Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the tag already exists
          if git rev-parse "refs/tags/${{ github.env.new_version }}" >/dev/null 2>&1; then
            echo "Tag ${{ github.env.new_version }} already exists. Skipping tag creation."
          else
            # Create and push the new tag
            git tag ${{ github.env.new_version }}
            git push origin ${{ github.env.new_version }}
          fi

      - name: Determine image name
        id: image-name
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "image_name=${{ env.REGISTRY }}/${{ github.repository }}-nextjs" >> $GITHUB_ENV
          else
            echo "image_name=${{ env.REGISTRY }}/${{ github.repository }}-nextjs-${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ github.env.image_name }}
          tags: |
            ${{ github.env.new_version }}
            latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Remove robots.txt if production preventing SEO
        if: github.ref_name != 'main'
        run: |
          echo "Removing robots.txt for non-production environment..."
          rm -f nextjs/public/robots.txt

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./nextjs
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trigger-deploy-workflow:
    if: github.ref == 'refs/heads/dev'
    needs: build-and-publish
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Trigger deployment via repository dispatch
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy
          client-payload: |
            {
              "branch_name": "${{ github.ref_name }}",
              "image_tag_name": "${{ github.env.image_name }}",
              "version": "${{ github.env.new_version }}",
            }
              
      - name: Notify deployment
        run: |
          echo "Deployment triggered for version ${{ github.env.new_version }} in branch ${{ github.ref_name }}."
          # TODO: Add notification logic here
          # e.g., send a message to Discord, email etc.
