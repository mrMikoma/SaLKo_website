name: Build and Publish Development

on:
  push:
    branches: ["dev"]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io

jobs:
  build-and-publish:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
    outputs:
      image_name: ${{ steps.image-name.outputs.image_name }}
      new_version: ${{ steps.image-version.outputs.new_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ github.ref_name }}
          sparse-checkout: |
            nextjs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image name
        id: image-name
        run: |
          image_name="salko_website-nextjs-${{ github.ref_name }}"
          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          echo "image_name=$image_name" >> $GITHUB_ENV

      - name: Determine latest image version
        id: image-version
        run: |
          # Fetch package versions from GitHub Container Registry
          latest_version=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${{ github.env.image_name }}/versions" | \
            jq -r '.[].metadata.container.tags[]?' | \
            grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | \
            sort -V | tail -n 1)
              
          # Handle case where no versions exist
          if [ -z "$latest_version" ] || [ "$latest_version" = "null" ]; then
            latest_version="v0.0.0"  # Default to v0.0.0 if no versions exist
          fi
          echo "Latest version from registry: $latest_version"
              
          # Extract major, minor, and patch
          IFS='.' read -ra ver <<< "${latest_version#v}"
          major=${ver[0]}
          minor=${ver[1]}
          patch=${ver[2]}
              
          # Increment patch version
          new_version="v$major.$minor.$((patch + 1))"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ steps.image-name.outputs.image_name }}
          tags: |
            ${{ steps.image-version.outputs.new_version }}
            latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Remove robots.txt for non-production preventing SEO
        run: |
          echo "Removing robots.txt for non-production environment..."
          rm -f nextjs/public/robots.txt

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./nextjs
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trigger-deploy-workflow-development:
    needs: build-and-publish
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      actions: write
    steps:
      - name: Trigger deployment via repository dispatch
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy-dev
          client-payload: |
            {
              "branch_name": "${{ github.ref_name }}",
              "image_tag_name": "${{ env.REGISTRY }}/${{ needs.build-and-publish.outputs.image_name }}",
              "image_version": "${{ needs.build-and-publish.outputs.new_version }}"
            }

      - name: Notify deployment
        run: |
          echo "Deployment triggered for version ${{ needs.build-and-publish.outputs.new_version }} in branch ${{ github.ref_name }}."
          # TODO: Add notification logic here
          # e.g., send a message to Discord, email etc.