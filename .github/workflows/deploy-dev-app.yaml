name: Deploy 'dev' branch

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy"
        required: true
        default: "latest"
        type: string
      branch:
        description: "Branch to deploy"
        required: true
        default: "dev"
        type: string
  repository_dispatch:
    types: [deploy]

env:
  NAME_PREFIX: "salko"
  SITE_PREFIX: "kehitys"
  HOST_URL: "savonlinnanlentokerho.fi"

jobs:
  deploy:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Extract workflow dispatch inputs
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "Extracting workflow dispatch inputs..."
          echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Extract repository dispatch payload
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: |
          echo "Extracting payload..."
          echo "BRANCH_NAME=${{ github.event.client_payload.branch_name }}" >> $GITHUB_ENV
          echo "IMAGE_TAG_NAME=${{ github.event.client_payload.image_tag_name }}" >> $GITHUB_ENV
          echo "VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ vars.SERVER_IP_SALKO0 }} >> ~/.ssh/known_hosts
      - name: Transfer configuration files to SERVER
        run: |
          scp -i ~/.ssh/id_ed25519 ./docker-compose.dev.yaml salko@${{ vars.SERVER_IP_SALKO0 }}:/home/salko/docker-compose.dev.yaml

      - name: Deploy APP to SERVER
        env:
          BRANCH_SUFFIX: ${{ env.BRANCH_NAME || 'dev' }}
          NODE_ENV: "production"
          CONTAINER_PORT: "3010"
          HOST_PORT: "3010"
          HOSTNAME: "0.0.0.0"
          IMAGE_TAG_NAME: ${{ env.IMAGE_TAG_NAME || 'latest' }}
          VERSION: ${{ inputs.version || env.VERSION || 'latest' }}
        run: |
          echo "Deploying to production..."
          ssh -i ~/.ssh/id_ed25519 salko@${{ vars.SERVER_IP_SALKO0 }} << "EOF"
            # Create or clear the .env.dev file
            > .env.dev

            # Append environment variables one by one
            echo "NAME_PREFIX=${{ env.NAME_PREFIX }}" > .env.dev
            echo "SITE_PREFIX=${{ env.SITE_PREFIX }}" >> .env.dev
            echo "BRANCH_SUFFIX=${{ env.BRANCH_SUFFIX }}" >> .env.dev
            echo "NODE_ENV=${{ env.NODE_ENV }}" >> .env.dev
            echo "CONTAINER_PORT=${{ env.CONTAINER_PORT }}" >> .env.dev
            echo "HOST_PORT=${{ env.HOST_PORT }}" >> .env.dev
            echo "HOSTNAME=${{ env.HOSTNAME }}" >> .env.dev
            echo "HOST_URL=${{ env.HOST_URL }}" >> .env.dev
            echo "IMAGE_TAG_NAME=${{ env.IMAGE_TAG_NAME }}" >> .env.dev
            echo "VERSION=${{ env.VERSION }}" >> .env.dev

            # Ensure the environment variables are written before proceeding
            echo ".env.dev file created with environment variables."

            # Stop the current containers
            echo "Stopping the current containers..."
            docker compose --env-file .env.dev -f docker-compose.dev.yaml down || true

            # Start the containers using Docker Compose
            echo "Starting containers using Docker Compose..."
            docker compose --env-file .env.dev -f docker-compose.dev.yaml up -d

            echo "Cleaning up old images..."
            docker image prune -f

            echo "Deployment complete."
          EOF

      # - name: Edit robots.txt to prevent SEO indexing
      #   run: |
      #     echo "User-agent: *" > robots.txt
      #     echo "Disallow: /" >> robots.txt
      #     scp -i ~/.ssh/id_ed25519 robots.txt salko@${{ vars.SERVER_IP_SALKO0 }}:/home/salko/nextjs/public/robots.txt

      - name: Notify success
        if: ${{ success() }}
        run: |
          echo "✅ Deployment successful!"
          echo "Site is available at: https://${{ env.SITE_PREFIX }}.${{ env.HOST_URL }}/${{ env.SITE_PREFIX }}"
      - name: Notify failure
        if: ${{ failure() }}
        run: |
          echo "❌ Deployment failed!"

      - name: Post Task Summary
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Deployment Summary" >> $GITHUB_OUTPUT
          echo "- **Branch:** \`${{ env.BRANCH_NAME || 'dev' }}\`" >> $GITHUB_OUTPUT
          echo "- **Version:** \`${{ env.VERSION || 'latest' }}\`" >> $GITHUB_OUTPUT
          echo "- **Image Tag:** \`${{ env.IMAGE_TAG_NAME || 'latest' }}\`" >> $GITHUB_OUTPUT
          echo "- **Server:** \`${{ vars.SERVER_IP_SALKO0 }}\`" >> $GITHUB_OUTPUT
          echo "- **Site URL:** [https://${{ env.SITE_PREFIX }}.${{ env.HOST_URL }}/${{ env.SITE_PREFIX }}](https://${{ env.SITE_PREFIX }}.${{ env.HOST_URL }}/${{ env.SITE_PREFIX }})" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
        
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
