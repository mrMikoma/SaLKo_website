name: Docker Publish

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main", "dev"]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        if: github.event_name != 'pull_request'
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" || echo "v0.0.0")
          # Extract major, minor, and patch
          IFS='.' read -ra ver <<< "${latest_tag#v}"
          major=${ver[0]}
          minor=${ver[1]}
          patch=${ver[2]}
          # Increment patch version
          new_version="v$major.$minor.$((patch + 1))"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create Git Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        if: github.event_name != 'pull_request'
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            ${{ env.new_version }}
            latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        if: github.event_name != 'pull_request'
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
#
# FIRST ITERATION
#env:
#  REGISTRY: ghcr.io
#  IMAGE_NAME: ${{ github.repository }}-${{ github.ref_name }}
#
#jobs:
#  build:
#    runs-on: ubuntu-24.04
#    permissions:
#      contents: read
#      packages: write
#      id-token: write
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#      - name: Install cosign
#        if: github.event_name != 'pull_request'
#        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
#        with:
#          cosign-release: "v2.2.4"
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
#      - name: Log into registry
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Extract Docker metadata
#        id: meta
#        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#      - name: Build and push Docker image
#        id: build-and-push
#        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
#        with:
#          context: ./nextjs
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
#      - name: Sign the published Docker image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          TAGS: ${{ steps.meta.outputs.tags }}
#          DIGEST: ${{ steps.build-and-push.outputs.digest }}
#        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
