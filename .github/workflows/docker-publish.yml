name: Docker Publish

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main", "dev"]

env:
  REGISTRY: ghcr.io

jobs:
  build-and-publish:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: |
          git fetch --tags

      - name: Determine version
        id: version
        if: github.event_name != 'pull_request'
        run: |
          # Get the latest tag, default to "v0.0.0" if none exist
          latest_tag=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
              
          # Extract major, minor, and patch
          IFS='.' read -ra ver <<< "${latest_tag#v}"
          major=${ver[0]}
          minor=${ver[1]}
          patch=${ver[2]}
              
          # Increment patch version
          new_version="v$major.$minor.$((patch + 1))"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create Git Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the tag already exists
          if git rev-parse "refs/tags/${{ env.new_version }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.new_version }} already exists. Skipping tag creation."
          else
            # Create and push the new tag
            git tag ${{ env.new_version }}
            git push origin ${{ env.new_version }}
          fi

      - name: Determine image name
        id: image-name
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "image_name=${{ env.REGISTRY }}/${{ github.repository }}-nextjs" >> $GITHUB_ENV
          else
            echo "image_name=${{ env.REGISTRY }}/${{ github.repository }}-nextjs-${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        if: github.event_name != 'pull_request'
        with:
          images: ${{ env.image_name }}
          tags: |
            ${{ env.new_version }}
            latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./nextjs
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
